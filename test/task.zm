/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Picture Naming


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2012-04-19 TV   Created.
2017-01-09 TV   Adapted for Zep 2.0.

\******************************************************************************/

//requires 2.5;

plugin zep_file;
import std_sound_input_device;
import std_sound_capture;

import defs;
import stimuli;

import namen;
import zinnen;

import shuffle;
import output;
import test_page;


TestItem[] instruction_items;
TestItem[] prac_items;
TestItem[] test_items;
string phase_name;

Block task
{
    Block instructions
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = instruction_items.size;

            // Prepare test page: progress bar and prompt enabled.
            test_page.setup(num_cycles, false);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = instruction_items[instructions.cycle];
                test_page.action(this, item, reference_time, instructions.cycle);
            }
        }
    }

    Block practice
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = prac_items.size;

            // Prepare test page: progress bar and prompt enabled.
            test_page.setup(num_cycles, true);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = prac_items[practice.cycle];

                test_page.action(this, item, reference_time, practice.cycle);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                "End of the practice part.\n"
                "\n"
                "If you have any questions at this moment please ask the "
                "experimenter now.\n"
                "\n"
                "<i>Hit Enter when ready to proceed.</i>",
                true);

            pause_page.action(this);
        }
    }

    Block test
    {
        TestItem        item;   // current item
	string 		dir;


        on_event:entry()
        {
            // Randomize test item table.
            if (shuffle_test_items(test_items) != OK) terminate;

            num_cycles = test_items.size;
           /* num_cycles = 3; */

            // Prepare test page: progress bar enabled, prompt disabled.
            test_page.setup(num_cycles, false);

            // Create folder for audio recordings
	    dir = data_dir() + script_name() + "/";
	    if (!file_exists(dir)) create_dir_tree(dir);
        }


        on_event:exit()
        {
            test_page.cleanup();
            save_trial_data();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[test.cycle];

		string filename = token(item.imgfn, "/", 1); // remove parent dir
		string stim = token(filename, ".", 0);  // remove image file extension
		string fn = dir + "ses_" +
		    format(expdb.session.id, 4) + "_" +
		    phase_name + "_" +
		    expdb.participant.id + "_" +
		    stim + ".wav";
		sound_capture.rec(fn, reference_time, 0s);

                test_page.action(this, item, reference_time, test.cycle);
            }


            on_event:exit()
            {
		// Stop audio recording.
		sound_capture.abort();
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = test.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.imgfn = item.imgfn;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller, int phase)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.

    if (phase == 0) {
	instruction_items = namen_instructions;
	prac_items = namen_prac_items;
	test_items = namen_test_items;
	phase_name = "namen";
    }
    else {
	instruction_items = zinnen_instructions;
	prac_items = zinnen_prac_items;
	test_items = zinnen_test_items;
	phase_name = "zinnen";
    }

    task.enter(caller);
}
