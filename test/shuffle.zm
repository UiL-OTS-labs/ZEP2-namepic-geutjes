// Shuffles specified list in test_items table according to following criteria:
//   - The maximum number of subsequent same type non-filler items is 2.
//   - The maximum number of subsequent non-filler items is 3.
//   - First item must be a filler item.
int shuffle_test_items(TestItem[] items)
{
    int nitems = items.size;

    // Depending on criteria and table contents it may happen that it takes
    // several attempts to make the shuffling succeed. We'll try it 100 times
    // before giving up.
    int nattempts;
    bool again = true;
    while (again && ++nattempts < 100) 
    {
        // First shuffle the entire item table.
        again = false;
        items.shuffle(0, -1);

        // Walk over the table and check for items conflicting with the
        // criterion. If an item conflicts, then swap it randomly with one 
        // of the items not yet looked at.
        int n;
        while (n < nitems)
        {
            int nitemswaps;
            while (!is_allowed_item_sequence(items, n))
            {
                if (n+1 == nitems || ++nitemswaps == 10) 
                {
                    again = true;
                    break;
                }
                items.swap(n, random(n, nitems - n));
            }
            if (again) break;
            n++;
        }
    }

    if (again)
        println("Unable to shuffle items according to criteria. "
            "Check table and/or criteria.");

    dump_test_items(items);
    return again ? ERROR : OK;
}


// Checks validity of item at position n in specified items table.
bool is_allowed_item_sequence(TestItem[] items, int n)
{
    // First item must be a filler item.
    if (n == 0 && items[n].type != FILLER) return false;

    if (items[n].type == FILLER) return true;

    // Item is non-filler.

    // The maximum number of subsequent non-filler items is 2.
    if (n >= 2 && 
        items[n-1].type != FILLER &&
        items[n-2].type != FILLER) return false;

    // Check that the name order is not the same as the previous item
    if (n >= 2 &&
	items[n].order == items[n-1].order) return false;

    return true;
}


// Prints test_items table contents in terminal window.
void dump_test_items(TestItem[] items)
{
    println("list: ");
    int nitems = items.size;
    int n;
    while (n < nitems)
    {
        println(string(n) + "\t" +
	    /* string(items[n].type) + "\t\t" + */
            string(items[n].id) + "\t" +
            string(items[n].order) + "\t" +
            substring(items[n].imgfn, 0, 20));
        n++;
    }
}
